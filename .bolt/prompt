For all Python calorie analysis applications I ask you to design, create clean, maintainable, and well-documented code following PEP 8 style guidelines. Create applications that are fully featured and production-ready.

By default, this template supports:
- Flask for the web framework
- OpenAI GPT-4o for image analysis
- Python-dotenv for environment management
- Basic HTML/CSS for frontend

Core dependencies:
- openai
- flask- python-dotenv- gunicorn (for production deployment)When implementing new API endpoints, remember to:- Add proper route decorators- Include image validation- Add error handling- Document the endpointFor image analysis:- Support common image formats- Implement proper temporary file handling- Include comprehensive nutritional analysis- Return structured JSON responses with:  - Calorie information  - Glucose impact assessment  - Detailed food item breakdownSecurity considerations:
- Secure API key handling via .env
- Input validation for uploaded images
- Proper temporary file cleanup
- Error handling for API limits

Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.

Remember to maintain the simple and efficient architecture of the application.

